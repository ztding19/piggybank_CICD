var Tx = require('ethereumjs-tx').Transaction
const Web3 = require('web3')
var fs = require('fs')

//你的INFURA ID

const rpcURL = "https://kovan.infura.io/v3/998b75ac3dc44270b7826686f6684bec"

const web3 = new Web3(rpcURL)



//用node創建的account1 有用kovan fauset領過錢ㄌ

const account1 = "0xA2cEc1aC87A2f6c44C950ed598dC1feEbEe67F4E"

const pk1 = "759940301e3e5b2656637a22ab7d78ec0cf656690862fe7d337bd5eafc2a4e91"

const privateKey1 = Buffer.from(pk1, 'hex')

//JSON
var output = JSON.parse(fs.readFileSync('PiggyBank.json', 'utf8'))
for (var contractName in output.contracts){
    fs.writeFileSync('./build/_abi.js', JSON.stringify(output.contracts[contractName].abi))
    fs.writeFileSync('./build/_bytecode.js', output.contracts[contractName].bin)
}
const bytecode = "0x" + fs.readFileSync('./build/_bytecode.js', 'utf-8')
console.log(bytecode)
web3.eth.getTransactionCount(account1, (err, txCount) => {

    //const data = "0x" + fs.readFileSync('./build/_bytecode.js', 'utf-8').toString()
    //const data = "0x608060405234801561001057600080fd5b506040516106d23803806106d283398181016040528101906100329190610095565b8060008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100e8565b60008151905061008f816100d1565b92915050565b6000602082840312156100ab576100aa6100cc565b5b60006100b984828501610080565b91505092915050565b6000819050919050565b600080fd5b6100da816100c2565b81146100e557600080fd5b50565b6105db806100f76000396000f3fe6080604052600436106100595760003560e01c80630c4f65bd146101055780633ccfd60b14610130578063401938831461014757806342948e18146101725780634c7389091461019d57806369aec912146101c857610100565b3661010057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156100bd576100bc610205565b5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b34801561011157600080fd5b5061011a6102c0565b6040516101279190610496565b60405180910390f35b34801561013c57600080fd5b50610145610205565b005b34801561015357600080fd5b5061015c6102ea565b60405161016991906104ec565b60405180910390f35b34801561017e57600080fd5b506101876102f0565b6040516101949190610496565b60405180910390f35b3480156101a957600080fd5b506101b261031a565b6040516101bf91906104ec565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190610419565b610322565b6040516101fc91906104b1565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c906104cc565b60405180910390fd5b6000546102a061031a565b106102be573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60005481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab906104cc565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156103fa573d6000803e3d6000fd5b5060019050919050565b6000813590506104138161058e565b92915050565b60006020828403121561042f5761042e610560565b5b600061043d84828501610404565b91505092915050565b61044f81610518565b82525050565b61045e8161052a565b82525050565b6000610471601983610507565b915061047c82610565565b602082019050919050565b61049081610556565b82525050565b60006020820190506104ab6000830184610446565b92915050565b60006020820190506104c66000830184610455565b92915050565b600060208201905081810360008301526104e581610464565b9050919050565b60006020820190506105016000830184610487565b92915050565b600082825260208201905092915050565b600061052382610536565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f6f6e6c79206f776e65722063616e2074616b65206d6f6e657900000000000000600082015250565b61059781610556565b81146105a257600080fd5b5056fea2646970667358221220653ab8f185839809cab791dfb7e5ec78e2e61c3f2a2ac184adbeb826f631493564736f6c63430008070033"
    const txObjext = {
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(10000000),
        gasPrice: web3.utils.toHex(web3.utils.toWei('10','gwei')),
        data: bytecode,
    }

    const tx = new Tx(txObjext, {chain: 'kovan'})
    tx.sign((privateKey1))

    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')

    web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        console.log('txHash: ', txHash)
    })
})